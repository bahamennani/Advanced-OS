 Explanation of the Code

    Semaphore and Shared Memory Setup:
        We create shared memory using shmget and attach it with shmat.
        We use three semaphores:
            MUTEX: Ensures exclusive access to the buffer.
            EMPTY: Tracks available slots in the buffer.
            FULL: Tracks occupied slots in the buffer.

    Producer Process:
        A producer waits on EMPTY to check if space is available, then locks the buffer with MUTEX.
        It inserts an item, updates the in index, signals the FULL semaphore, and unlocks the buffer.
        This is repeated to produce multiple items, as defined by the loop.

    Consumer Process:
        A consumer waits on FULL to check for available items, then locks the buffer with MUTEX.
        It removes an item, updates the out index, signals EMPTY to allow more items, and unlocks the buffer.
        This is repeated to consume multiple items.

    Process Creation:
        The main function spawns NUM_PRODUCERS and NUM_CONSUMERS processes.
        Each producer and consumer executes independently, accessing the shared buffer concurrently.

    Cleanup:
        After all processes finish, we detach and remove the shared memory and semaphores.
        
        
   *******************************************************************************************************************************************************************
   
        
 Challenges and Design Choices

    Race Conditions:
        We used semaphores for MUTEX, FULL, and EMPTY to avoid race conditions and ensure safe access.

    Synchronization:
        The EMPTY and FULL semaphores help coordinate when a producer can produce and a consumer can consume.

    Process Communication:
        System V shared memory and semaphores allow efficient inter-process communication between producers and consumers.

    Scalability:
        This design allows for adding more producers or consumers by simply adjusting NUM_PRODUCERS and NUM_CONSUMERS.

 This solution ensures that producers and consumers access the shared buffer in a synchronized manner, preventing race conditions and making efficient use of the buffer.     
